version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: todo-db
    environment:
      POSTGRES_USER: ${DB_USER:-todouser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-todopass}
      POSTGRES_DB: ${DB_NAME:-tododb}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-todouser}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: todo-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${DB_USER:-todouser}
      DB_PASSWORD: ${DB_PASSWORD:-todopass}
      DB_NAME: ${DB_NAME:-tododb}
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - todo-network
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    command: npm start

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: todo-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - todo-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Adminer - Database Management UI (Optional - for teaching purposes)
  adminer:
    image: adminer:4.8.1
    container_name: todo-adminer
    ports:
      - "8080:8080"
    depends_on:
      - database
    networks:
      - todo-network
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DEFAULT_DB: tododb
      ADMINER_DESIGN: pepa-linha

networks:
  todo-network:
    driver: bridge

volumes:
  postgres_data: